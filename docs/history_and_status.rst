DISCLAIMER: This document was written by Thomas Wessel in 2024 after 
only knowing pytest-mpl for a few weeks, and it is likely to contain inaccurate statements. 

pytest-mpl was created in 2015, and the description back then was roughly the same as now:
an extension for pytest, for comparing / validating Figure objects generated by matplotlib. 

The first versions relied, behind the scenes, on existing test code in matplotlib. Some of 
this existing test code seems to have been written in nose, btw. Nose was one of the first
unit testing frameworks, besides unittest which is more primitive. Today pytest has taken 
over in general, and basically everybody agrees that pytest is the better choice. However,
nose is still used in lots of projects for legacy reasons. 

As far as I can tell, the plan from the very beginning was to make pytest-mpl not rely on 
the test code in matplotlib. 

I suspect that pytest-mpl was built mainly for testing tools that rely on matplotlib, and
not for testing matplotlib itself. I think so, because as far as I can tell, from 
comments in this issue from 2020, and this post forum post in 2020, matplotlib did not 
use pytest-mpl at that time. Instead it solely used it's own *test harness*. At least 
some agreed that if man power was not a shortage, then all test code should be changed
to use pytest-mpl where possible. 

I have not been able to tell if that has happened since 2020. 

I would have liked to know how many projects use pytest-mpl, and name a few good examples. 

I can see that some projects, that don't use matplotlib, still use pytest-mpl for doing
image comparison. See here: https://github.com/matplotlib/pytest-mpl/issues/201. PyGMT 
has done so extensively since 2017. And also note, that astrofrog is the person who
created the issue, to ask for opinions against this; he is one of the most qualified for
making such a change. 
